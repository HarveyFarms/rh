#+title: Learning SDL
#+author: Ryan Harvey

* resources
** API reference
- name https://wiki.libsdl.org/SDL2/CategoryAPI
- category https://wiki.libsdl.org/SDL2/APIByCategory
** tutorials
*** website
https://www.parallelrealities.co.uk/tutorials/
*** youtube playlists
1. [[https://www.youtube.com/watch?v=QQzAHcojEKg&list=PLhfAbcv9cehhkG7ZQK0nfIGJC_C-wSLrx][20+ videos ~10-30 minute videos]]
2. [[https://www.youtube.com/watch?v=1KD4Ae0tX0g&list=PL-K0viiuJ2RctP5nlJlqmHGeh66-GOZR][50+ videos ~10-30 minute videos]]_

* My notes
** definitions and initializing
- Before anything can be done in main, it's best to define the screen width and height, as well as the pointer variables.
- It's also useful to create functions for every main thing, so it's not all stuffed in the main function
*** Header Files
Header files are a need, to organize and not have cluttered code. Also, all header files should be under one common header file, so all the .cpp files aren't stacked with the much needed header files

- example of a sdl game's files:
 common.h - contains common headers.
 defs.h - contains definitions, such as the size of the window.
 draw.c - functions related to drawing and rendering.
 draw.h - header file for draw.c.
 init.c - functions concerned with setting up SDL.
 init.h - header file for init.c.
 input.c - handles input, such as reading the keyboard.
 input.h - header file for input.c.
 main.c - where the main loop and program entry point exists.
 main.h - header file for main.c.
 structs.h - object definitions.
*** constants
screen width and height should be constants, and put in a "defs.h" file like so:
#+begin_src c++
#define SCREEN_WIDTH = 1920
#define SCREEN_HEIGHT = 1080
#+end_src c++
*** common struct
#+begin_src c++
typedef struct {
	SDL_Renderer *renderer;
	SDL_Window *window;
} App;
#+end_src c++
*** common functions
**** initializing SDL
#+begin_src c++
void initSDL()
{
   // initialize everything and make cases for failed initialization
   int rendererFlags, windowFlags;

	 rendererFlags = SDL_RENDERER_ACCELERATED;

	 windowFlags = 0;

	 if (SDL_Init(SDL_INIT_VIDEO) < 0)
	 {
		printf("Couldn't initialize SDL: %s\n", SDL_GetError());
		exit(1);
	 }

	 app.window = SDL_CreateWindow("Shooter 01", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, windowFlags);

	 if (!app.window)
	 {
		printf("Failed to open %d x %d window: %s\n", SCREEN_WIDTH, SCREEN_HEIGHT, SDL_GetError());
		exit(1);
	 }

	 SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "linear");

	 app.renderer = SDL_CreateRenderer(app.window, -1, rendererFlags);

	 if (!app.renderer)
	 {
		printf("Failed to create renderer: %s\n", SDL_GetError());
		exit(1);
	 }
}
#+end_src c++
**** handling input
#+begin_src c++
void doInput()
{

   // handle all input here
   SDL_Event event;

   while (SDL_PollEvent(&event))
   {
      switch (event.type)
      {
         case SDL_Quit:
            exit(0);
            break;

         default:
            break;
      }
   }
}
#+end_src c++
**** presenting screen
#+begin_src c++
void prepareScene(void)
{
   // draws a color on the screen as to refresh it
	 SDL_SetRenderDrawColor(app.renderer, 96, 128, 255, 255);
	 SDL_RenderClear(app.renderer);
}

void presentScene(void)
{
   // self-explanatory
 	 SDL_RenderPresent(app.renderer);
}
#+end_src c++

**** main (after all is setup)
#+begin_src c++
int main(int argc, char *argv[])
{
	memset(&app, 0, sizeof(App));

	initSDL();

	atexit(cleanup);

	while (1)
	{
		prepareScene();

		doInput();

		presentScene();

		SDL_Delay(16);
	}

	return 0;
}
#+end_src c++
